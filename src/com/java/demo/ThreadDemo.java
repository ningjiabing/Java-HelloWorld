package com.java.demo;

public class ThreadDemo {

    public static void main(String[] args) throws InterruptedException {

        // 多线程
        // Java语言内置了多线程支持：一个Java程序实际上是一个JVM进程，JVM进程用一个主线程来执行main()方法，在main()方法内部，我们又可以启动多个线程。此外，JVM还有负责垃圾回收的其他工作线程等。
        // 因此，对于大多数Java程序来说，我们说多任务，实际上是说如何使用多线程实现多任务。
        // 和单线程相比，多线程编程的特点在于：多线程经常需要读写共享数据，并且需要同步。例如，播放电影时，就必须由一个线程播放视频，另一个线程播放音频，两个线程需要协调运行，否则画面和声音就不同步。因此，多线程编程的复杂度高，调试更困难。
        // Java多线程编程的特点又在于：
        // 多线程模型是Java程序最基本的并发模型；
        // 后续读写网络、数据库、Web开发等都依赖Java多线程模型。
        Thread t = new Thread(new MyRunnable());
        t.start(); // 启动新线程

        // 一个线程还可以等待另一个线程直到其运行结束。例如，main线程在启动t线程后，可以通过t.join()等待t线程结束后再继续运行
        t.join();

        // 中断线程
        // 对目标线程调用interrupt()方法，目标线程需要反复检测自身状态是否是interrupted状态，如果是，就立刻结束运行。
        t.interrupt();

        // 守护线程（Daemon Thread）。
        // 守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。
        // 如何创建守护线程呢？方法和普通线程一样，只是在调用start()方法前，调用setDaemon(true)把该线程标记为守护线程：
        t.setDaemon(true);

        // 线程同步
        // 当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。
        // 这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。
        // 代码详见 MyRunnable.java

    }

}
